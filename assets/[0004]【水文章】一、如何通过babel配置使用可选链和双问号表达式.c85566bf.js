export default'# 如何通过babel配置使用可选链`?.`和双问号`??`\n\n## 什么是可选链\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining)\n当访问多层对象属性(如`o.a.b`)时，如果属性`a`为空，则会报引用错误\n为此我们不得不这么处理：\n```\nconst c = o.a && o.a.b ? o.a.b : undefined\n```\n有了可选链，就可以对一个为null或者undefined属性安全引用：\n```\nconst o = {}\n\nconst tryA_B = o?.a?.b\nconsole.log(tryA_B) // undefined\n```\n## 什么是双问号\n[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator)\n\n```\nvalue1 ?? value2\n```\n`??`在`value1`和`value2`之间，只有当`value1`为`null`或者 `undefined`时取`value2`，否则取`value1`（`0`,`false`,`""`被认为是有意义的，所以还是取`value1`）\n```\nconst o = {}\nconst c_or_d = o.c ?? \'d\'\nconsole.log(c_or_d) // \'d\'\nconsole.log(0 ?? 1) // 0\nconsole.log("" ?? "foo") // ""\n```\n等价于\n```\nconst c_or_d = (o.c === null || typeof o.c === "undefined") ? o.c : \'d\'\n```\n\n## 如何使用\n首先检查你的项目依赖中的`babel`版本，如果你的babel版本<7，那么很遗憾，你得先解决babel版本升级的问题。\n如果是babel7以上的版本，可以添加以下2个`devDependencies`依赖：\n> @babel/plugin-proposal-optional-chaining // 可选链  \n@babel/plugin-proposal-nullish-coalescing-operator // 双问号\n\n然后在.babelrc或者babel.config.js中这加入2个插件(plugins属性放在JSON顶层)：\n```\n{\n "plugins": [\n    "@babel/plugin-proposal-nullish-coalescing-operator",\n    "@babel/plugin-proposal-optional-chaining"\n  ]\n}\n```\n之后就可以愉快地使用了！\n\n## 最简实践\n为了检验插件是否真的有用，这里提供一个最小实践示例：\n首先编写示例代码 `index.js`：\n```\nvar foo = {\n\ta: 1,\n\tzero: 0,\n}\n\nvar fooA = foo.a;\nvar fooB = foo?.b;\nvar fooNilValue = foo?.nil?.value;\n\nvar fooDefault = foo.default ?? \'default value\';\nvar fooZeroDefault = foo.zero ?? \'zero value\';\n\nconsole.log(fooA); // 1\nconsole.log(fooB); // undefined\nconsole.log(fooNilValue); // undefined\nconsole.log(fooDefault); // default value\nconsole.log(fooZeroDefault); // 0\n```\n项目根目录下初始化npm仓库 `npm init`，然后安装下列依赖(现在是2020年了，默认都是7以上的版本)：\n> npm i --save-dev @babel/cli @babel/core @babel/preset-env\n\n项目根目录添加配置文件  `babel.config.js` ，不用加别的，可选链和双问号插件会根据你的语法自动转义：\n```\nmodule.exports = {\n\tpresets: [\n\t\t"@babel/preset-env"\n\t]\n}\n``` \n\n执行编译命令：\n> npx babel index.js -d dist\n\n构建完毕，在`./dist/index.js` 中看到生成的文件，说明编译成功：\n```\n"use strict";\n\nvar _foo$nil, _foo$default, _foo$zero;\n\nvar foo = {\n  a: 1,\n  zero: 0\n};\nvar fooA = foo.a;\nvar fooB = foo === null || foo === void 0 ? void 0 : foo.b;\nvar fooNilValue = foo === null || foo === void 0 ? void 0 : (_foo$nil = foo.nil) === null || _foo$nil === void 0 ? void 0 : _foo$nil.value;\nvar fooDefault = (_foo$default = foo["default"]) !== null && _foo$default !== void 0 ? _foo$default : \'default value\';\nvar fooZeroDefault = (_foo$zero = foo.zero) !== null && _foo$zero !== void 0 ? _foo$zero : \'zero value\';\nconsole.log(fooA);\nconsole.log(fooB);\nconsole.log(fooNilValue);\nconsole.log(fooDefault);\nconsole.log(fooZeroDefault);\n```\n';
