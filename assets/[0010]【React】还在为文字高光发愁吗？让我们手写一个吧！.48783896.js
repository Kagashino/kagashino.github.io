export default'## 目的  \n实现一个高光文字组件，如下图：\n![image.png](https://upload-images.jianshu.io/upload_images/3132311-0c5c89f325bf3bac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n指定关键字“小明”，全文匹配关键字并高光显示\n\n## 要求\n除了React本身和JSX，**不借助任何第三方依赖，也不能直接操作DOM**\n## 思路\n我这里使用切片法，将高亮文本头尾切割，文本变数组，当匹配到高亮文字时，文本替换成JSX。  \n需要说明的是，JSX是`React.createElement`的语法糖。如果你熟悉`React.createElement`函数的用法，那么就可以结合JavaScript原生的**正则、数组**等方法，很容易就能构造出高光组件。\n\n参考上图，截取上面一段文本举例\n> 他叫小明，是一个普通的程序员\n\n我们的目标是把文本中出现的【小明】高亮显示，把刚才的方法总结一下，我们拆解出如下步骤：\n1. 将文本中的小明分离出来，并和其他文本一起并入一个数组：\n```\n// 从\n"他叫小明，是一个普通的程序员"\n// 变成\n[\n  "他叫",\n  "小明", // 这就是分离出来的小明\n  "，是一个普通的程序员"\n]\n```\n2.遍历数组，如果匹配到【小明】，则把他替换成`React.createElement`函数，效果如下：\n```\n[\n  "他叫",\n  React.createElement("span", { style: { color: "blue" } }, "小明")\n  "，是一个普通的程序员"\n]\n```\n或者使用JSX，效果相同：\n```\n[\n  "他叫",\n  <span style={{ color: \'blue\' }}>小明</span>\n  "，是一个普通的程序员"\n]\n```\n3.用`React.createElement`创建一个`div`作为父元素（当然你也可以使用Fragment碎片直接拼接），把数组作为children传过去：\n```\nReact.createElement(\n  \'div\',\n  null,\n  [\n    "他叫",\n    React.createElement("span", { style: { color: "blue" } }, "小明")\n    "，是一个普通的程序员"\n  ]\n)\n```\nJSX等价代码：\n```\n<div>{[\n    "他叫",\n   (<span style={{ color: \'blue\' }}>小明</span>),\n    "，是一个普通的程序员"\n  ]}</div>\n```\n\n不就是下面这段HTML了？\n```\n<div>\n    他叫<span style="color: blue">小明</span>，是一个普通的程序员\n</div>\n```\n\n## 代码实现\n老规矩，不熟悉Typescript的去补补课\n```\ntype HighlightProps = {\n  text: string,\n  pattern: RegExp | string,\n  flag?: string,\n  matchClassName?: string,\n  matchStyle?: { [key: string]: string }\n}\n/**\n * 高光组件\n * @param text {string} 文本\n * @param pattern { string | null| RegExp } 匹配单词/正则\n * @param flag 正则匹配模式\n * @param matchClassName 匹配文本class\n * @param style 匹配文本样式\n */\nconst WithHighlight = ({\n                         text = \'\',\n                         pattern = \'\',\n                         flag = \'ig\',\n                         matchClassName = \'kg-highlight\',\n                         matchStyle = {}\n}: HighlightProps) => {\n  if (!pattern) {\n    return null;\n  }\n\n  const re = new RegExp(pattern, flag); // 基于关键字构造正则\n\n  if (!re.test(text)) {\n    return (\n      <div>{text}</div>\n    )\n  }\n  const splitter = \'\\u0001\\u0003\' //  使用的特殊字符作为分割标记\n  const matchArray = text\n    .replace(re, m=>`${splitter}${m}${splitter}`) // 将匹配到的文字使用特殊字符包裹\n    .split(splitter)\n    .filter(Boolean) // 处理关键字在起始位置的时候留下的空字符串（这里不处理也可以）\n  return (\n    <div>\n      {\n        matchArray.map(node => {\n          if (!re.test(node)) {\n            return node;\n          }\n          return <span className={matchClassName} style={matchStyle}>{node}</span>\n        })\n      }\n    </div>\n  )\n};\n```\n\n**使用**：按照规定传入参数即可\n```\nconst HighlightIndex = () => {\n  const [text, setText] = useState(\'他叫小明，是一个普通的切图仔，小明的爸爸让小明买两斤苹果，如果看到卖西瓜的就买一个...\')\n\n  return <div>\n    <textarea\n      rows={10}\n      cols={110}\n      defaultValue={text}\n      placeholder="请输入带有【小明】的文本"\n      onChange={(e)=>setText(e.target.value)} />\n    <h3>效果</h3>\n    <WithHighlight text={text} pattern="小明" matchStyle={{ color: \'#6ae\', fontWeight: \'bold\' }} />\n  </div>\n}\n```\n';
